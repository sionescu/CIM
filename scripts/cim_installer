#!/bin/sh -
# This file is for execute
set -e
: ${CIM_INSTALL_BRANCH:=master}
: ${CIM_HOME:="$HOME/.cim"};
export CIM_HOME
umask 077

lockfile="$CIM_HOME/tmp/installer.lock"

download(){
    if command -v curl > /dev/null 2>&1;then
	curl -L "$1" > "$2"
    elif command -v wget > /dev/null 2>&1 ;then
	wget  -O "$2" "$1"
    elif command -v fetch > /dev/null 2>&1;then
	fetch -o "$2" "$1"
    elif command -v tclsh > /dev/null > 2&1;then
	echo 'package require http ; if {"[lindex $argv 2]" == "-"} {set chan stdout} else {set chan [file open "[lindex $argv 2]"]} ; ::http::geturl "[lindex $argv 1]" -channel $chan' | tclsh - "$1" "$2"
    elif which ruby > /dev/null 2>&1; then
	ruby -ropen-uri -e "out = ARGV[1] == '-' ? STDOUT : open('ARGV[1]');out.write open(ARGV[0]).read" "$1" "$2"
fi
}

download_from_git(){
    git archive --remote "$1" -o "$2" --prefix="CIM-$CIM_INSTALL_BRANCH/" "$CIM_INSTALL_BRANCH"
}

aquire_lock(){
    if [ -e "$lockfile" ]; then
        echo "Another install process is running."
        exit 1
    else
        touch "$lockfile"
        trap "exit 1" HUP INT PIPE QUIT TERM
        trap "rm -f $lockfile" EXIT
    fi
}

prepare_tmp(){
    TMPDIR="$CIM_HOME/tmp"
    mkdir -p "$TMPDIR"
    export TMPDIR
}

get_cim(){
    if [  $# -ne 0 ];then
        archive="$TMPDIR/CIM-${CIM_INSTALL_BRANCH}.tar"
        download_from_git "$1" "$archive" ;
        tar xf "$archive" -C "$TMPDIR/"
    else
        archive="$TMPDIR/CIM-${CIM_INSTALL_BRANCH}.tar.gz"
        download "https://codeload.github.com/KeenS/CIM/tar.gz/${CIM_INSTALL_BRANCH}" "$archive"
        # :FIXME: check checksum
        gzip -cd "$archive" | tar xf - -C "$TMPDIR/"
    fi
}

expand_cim(){
    rm -rf "$CIM_HOME/scripts/" "$CIM_HOME/lib" "$CIM_HOME/res" "$CIM_HOME/doc"
    touch "$CIM_HOME/NEWS"
    mv "$CIM_HOME/NEWS" "$CIM_HOME/NEWS.old"
    cp -rf "$TMPDIR/CIM-${CIM_INSTALL_BRANCH}/"* "$CIM_HOME/"
    rm -rf "$TMPDIR/CIM-${CIM_INSTALL_BRANCH}.tar.gz" "$TMPDIR/CIM-${CIM_INSTALL_BRANCH}"
}

prepare_dirs(){
    for dir in bin config log impls src archives; do
        mkdir -p "$CIM_HOME/$dir"
    done
}

link_aliases(){
    ln -sf "$CIM_HOME/scripts/cim_cmd_list_uninstall" "$CIM_HOME/scripts/cim_cmd_list_reinstall"
    ln -sf "$CIM_HOME/res/ql_help_install" "$CIM_HOME/res/ql_help_quickload"
    ln -sf "$CIM_HOME/res/ql_help_search" "$CIM_HOME/res/ql_help_system-apropos"
}

prepare_bins(){
    for executable in cl ql cim; do
        rm -f "$CIM_HOME/bin/$executable"
        ln -s "$CIM_HOME/scripts/$executable" "$CIM_HOME/bin/$executable"
        chmod u+x "$CIM_HOME/scripts/$executable"
    done
    cim_aware_system_lisp
    for link in $impls; do
        chmod u+x "$CIM_HOME/scripts/$link"
        # if it is older system
        if [ -L "$CIM_HOME/bin/$link" ] &&
               ! expr "`ls -l "$CIM_HOME/bin/$link"`" : ".*$CIM_HOME/scripts/$link" > /dev/null 2>&1; then
	    full_name=`ls -l "$CIM_HOME/bin/$link" | grep -o "$CIM_HOME/bin/\(.*-.*\)"`
	    impl=${full_name%-*}
	    for config in `find "$CIM_HOME/config/" -mindepth 1 2> /dev/null `; do
	        echo "$impl=$full_name" >> "$config"
	    done
        fi
        rm -f "$CIM_HOME/bin/$link"
        installed=`find "$CIM_HOME/bin/" -mindepth 1 -name "$impl-*" -exec basename '{}' ';' 2> /dev/null `
        if [ -n "$installed" ];then
            ln -s "$CIM_HOME/scripts/$link" "$CIM_HOME/bin/$link"
        fi
    done
    cim_register_all_impls
}

show_news(){
    if ! diff -q "$CIM_HOME/NEWS" "$CIM_HOME/NEWS.old" > /dev/null 2>&1; then
        echo "NEWS: "
        diff -LTYPE-line-format="%<" "$CIM_HOME/NEWS" "$CIM_HOME/NEWS.old" | sed '1d;s/^< /  /'
        echo "--"
        rm  "$CIM_HOME/NEWS.old"
    fi
}

show_config_message(){
    if expr "$SHELL" : '.*csh' > /dev/null 2>&1; then
        conf=csh
        case "$SHELL" in
	    */csh)  rcfile="$HOME/.cshrc";;
	    */tcsh) rcfile="$HOME/.tcshrc";;
            *) rcfile=UNKNOWN;;
        esac
    elif expr "$SHELL" : '.*sh' > /dev/null 2>&1; then
        conf=sh
        case "$SHELL" in
	    */bash) rcfile="$HOME/.bashrc";;
	    */zsh)  rcfile="$HOME/.zshrc";;
	    */sh)   rcfile="$HOME/.profile";;
            */ksh)  rcfile="$HOME/.kshrc";;
            *) rcfile=UNKNOWN;;
        esac
    else
        conf=UNKNOWN
    fi
    if [ "$rcfile" != UNKNOWN ] && [ "$conf" != UNKNOWN  ]; then
        cat <<EOM

To setup CIM, run this command (if haven't)
\`\`\`
$CIM_HOME/bin/cim config "$conf" >> "$rcfile"
\`\`\`

EOM
    fi

    
}

show_messages(){

    show_config_message

    echo "Install done. Thank you for using cim."
    echo
    show_news
    echo
    echo "If you have any problems or questions, ask keen (@blackenedgold) freely."
}

main(){
    
    if [ "$1" = "--help" ]; then
        cat <<EOF
Usage:
$0 [git-repo]

Use CIM_INSTALL_BRANCH to control install branch
EOF
        exit
    fi

    # ensure a writable temp dir exists
    prepare_tmp
    # ensure running CIM installation is only one. The lock is automatically freed.
    aquire_lock
    # get from github or from local git repository
    get_cim "$@"
    # move installed files to CIM_HOME
    expand_cim

    ## Now you can access all the cim's scripts
    . "$CIM_HOME/scripts/cim_utils"

    # prepare dirs used by CIM
    prepare_dirs
    # `ln` some aliases
    link_aliases
    # prepare bins like `cim` `cl` `ql`
    prepare_bins

    ## CIM installation is done

    show_messages
}
main "$@"
